How To Build a Multi-Step Form using NextJS, TypeScript, React Context, And Shadcn UI
Edgardo Rodr√≠guez
Edgardo Rodr√≠guez

¬∑
Follow

7 min read
¬∑
Jan 22, 2024
98


4




A few days ago, while working on my project, a new challenge arose for me as I needed to implement a multi-step form ‚Äî also known as a wizard form ‚Äî so that users could fill in a series of steps.

There are many ways to approach this challenge and the solution I‚Äôm going to show you is based on the use of NextJS pages and the React Context API.

Now, let‚Äôs dive into the code.

Defining the Form Features
The form should have the following essential features:

Verification of empty inputs.
Allowing the user to go back to the previous step.
Allowing the user to proceed to the next step.
Storing each input value in a state regardless of the user‚Äôs current step.
Creating the Form Context in NextJS
Now, let‚Äôs create the context in which we will handle the state of each form step. Using a context in React allows us to store a global state, independent of the page we are on. Create a file named multistep-form-context.ts.

Inside this file, the first step is to define how the form state will look.

For this, I‚Äôll create a User type as follows:

export type User = {
  name: string
  lastname: string
  email: string
  password: string
  age: string
}

// "This will allow you to update the state within the context whenever you need to."
export interface UserContextProps {
    propertyForm: User | null
    updatePropertyForm: (property: Partial<User>) => void
}
After defining the global state of the form, the next step is to create the context:

export const NewPropertyFormContext = createContext<UserContextProps | null>({
    user: null,
    updatePropertyForm: () => null,
})
createContext<UserContextProps | null>: This is using the createContext function from React to create a new context. As mentioned before, a context in React is a way of sharing information between components without the need to manually pass props through each level of the component hierarchy.
UserContextProps | null: Here, you must specify the data type that you will use.
{ user: null, updatePropertyForm: () => null }: This is creating an object with two properties: ‚Äòuser‚Äô initialized as null and ‚ÄòupdatePropertyForm‚Äô, which is a function responsible for updating the state within the context.
Creating a Context Provider
Now that you have created your context, the next step is to create a provider. The code for this is as follows:

export function UserFormContextProvider({ children }) {
    // code her
}
As you can notice in the example above, I have created a component called UserFormContextProvider that will be responsible for providing the context.

The next step is to define the state that you want to be global among the components; this state goes inside the context provider.

Just like that. üëáüèΩ

export function UserFormContextProvider({ children }) {
// adding this code üëáüèΩ
 const [user, setUser] = useState<User | null>(null)

// adding this code üëáüèΩ
 const updateUserData = (values: Partial<User>) => {
  setUser({ ...user, ...values })
 }

}
Now, as the final step, the provider should return the context provider.

export function UserFormContextProvider({ children }) {
 const [user, setUser] = useState<User | null>(null)

 const updateUserData = (values: Partial<User>) => {
  setUser({ ...user, ...values })
 }

// adding this code üëáüèΩ
 return (
  <NewUserFormContext.Provider value={{ user, updateUserData }}>
   {children}
  </NewFormContext.Provider>
 )
}
The component returns a NewUserFormContext.Provider with the value prop set to an object containing user and updateUserData. This will help you to access and modify the context from any component or page in NextJS.

To finalize the context, we need to create a custom hook that will handle determining if the components belong to the same context.

export const useNewUserFormContext = () => {
  const context = useContext(NewPropertyFormContext)
  if (!context) {
    throw new Error('useNewPropertyFormContext must be used within a NewUserFormContextProvider')
  }

  return context
}
Creating the steps of the form
For this example, we are going to create a simple login that needs to be completed in three steps. To achieve this, you should create three pages in Next.js, for instance:


NextJS folder structure
The way we‚Äôre going to tackle this challenge is by creating three different forms. Each page should have its own form, and we‚Äôll link them using the React context we created earlier, `NewUserFormContext`.

For my example, I‚Äôll create the forms using components from the Shadcn UI library ‚Äî [https://ui.shadcn.com/docs/components/form](https://ui.shadcn.com/docs/components/form) ‚Äî as they save development time and are quite comprehensive components.

However, you can use your own components or libraries of your choice. Let‚Äôs build the forms as follows:

Creating the layout component
All pages that will share the context state must belong to the same Next.js layout.

So, within the login folder, you should create a component: login/layout.tsx

'use client'

import { UserFormContextProvider } from '@/context/multistep-form-context.ts'

export default function Layout({ children }) {

  return (
    <main>
      <UserFormContextProvider>{children}</UserFormContextProvider>
      <div className="h-36 md:h-0"></div>
    </main>
  )
}
The only thing the layout ‚Äî the code you have above ‚Äî takes care of is wrapping all the login steps in a single context provider. If any step or component doesn‚Äôt belong to the layout, it won‚Äôt be able to access the state within the context.


  
  // YOU NEED TO IMPORT THE CONTEXT FIRST 
   const formContext = useNewUserFormContext()

  // STEP 1: Defining the form schemaüëáüèΩ
  const newPropertyFormSchema = z.object({
    name: z.string().min(3, 'at least 3 characteres'),
    lastname: z.string().min(3, 'at least 3 characteres'),
   
  })

  // STEP 2: Defining your form.
  const stepOneForm = useForm<z.infer<typeof newUserFormSchema>>({
    resolver: zodResolver(newUserFormSchema),
    mode: 'onChange',
    defaultValues: {
      name: formContext.user.name,
      lastname: formContext.user.lastname,
    },
  })

  // STEP 3: Defining the submit function
  function onSubmit(values: z.infer<typeof newUserFormSchema>) {
    formContext.updateUserData(values)

    router.push('/login/step_two/')
  }
For the first step, I use the ZOD library, which allows me to add validations to my form.
In the second step, I use the React Hook Form library to create my form based on the ZOD schema and assign default values to the `name` and lastname properties.
In the third step, I create a function called `onSubmit` that takes values from the inputs, and calls the `updateUserData` function responsible for updating the global state within the context.
Finally, we use the Next.js router to move to the next page with router.push().
To conclude the first component, the initial step of our form, we add the TSX code.

return(<Form {...stepOneForm}>
     <form
      onSubmit={stepOneForm.handleSubmit(onSubmit)}
      className='bg-white p-6 rounded-lg shadow space-y-8'>
      <FormField
       name='name'
       control={stepOneForm.control}
       render={({ field }) => (
        <FormItem>
         <FormLabel>Name</FormLabel>
         <FormMessage />
         <FormControl>
          <Input {...field} />
         </FormControl>
         <FormDescription className='text-gray-600'>
          Enter your name
         </FormDescription>
        </FormItem>
       )}
      />
      <FormField
       name='lastname'
       control={stepOneForm.control}
       render={({ field }) => (
        <FormItem>
         <FormLabel>Lastname</FormLabel>
         <FormMessage />
         <FormControl>
          <Input {...field} />
         </FormControl>
        </FormItem>
       )}
      />
      <div className='py-10 space-x-8'>
       <Button type='submit'>Next</Button>
      </div>
     </form>
    </Form>)
Remember that for this example, I‚Äôm using components from the Shadcn/UI library. However, you can use your own components if you wish.

Here is the complete code for the first step of our multi-step form:

export default Page(){
  // YOU NEED TO IMPORT THE CONTEXT FIRST 
   const formContext = useNewUserFormContext()

  // STEP 1: Defining the form schemaüëáüèΩ
  const newUserFormSchema= z.object({
    name: z.string().min(3, 'at least 3 characteres'),
    lastname: z.string().min(3, 'at least 3 characteres'),
   
  })

  // STEP 2: Defining your form.
  const stepOneForm = useForm<z.infer<typeof newUserFormSchema>>({
    resolver: zodResolver(newUserFormSchema),
    mode: 'onChange',
    defaultValues: {
      name: formContext.user.titulo,
      lastname: formContext.user.descripcion,
    },
  })

  // STEP 3: Defining the submit function
  function onSubmit(values: z.infer<typeof newUserFormSchema>) {
    formContext.updateUserData(values)

    router.push('/login/step_two/')
  }
  
  return(<Form {...stepOneForm}>
     <form
      onSubmit={stepOneForm.handleSubmit(onSubmit)}
      className='bg-white p-6 rounded-lg shadow space-y-8'>
      <FormField
       name='name'
       control={stepOneForm.control}
       render={({ field }) => (
        <FormItem>
         <FormLabel>Name</FormLabel>
         <FormMessage />
         <FormControl>
          <Input {...field} />
         </FormControl>
         <FormDescription className='text-gray-600'>
          Enter your name
         </FormDescription>
        </FormItem>
       )}
      />
      <FormField
       name='lastname'
       control={stepOneForm.control}
       render={({ field }) => (
        <FormItem>
         <FormLabel>Lastname</FormLabel>
         <FormMessage />
         <FormControl>
          <Input {...field} />
         </FormControl>
        </FormItem>
       )}
      />
      <div className='py-10 space-x-8'>
       <Button type='submit'>Next</Button>
      </div>
     </form>
    </Form>)

}
Now we need to do the same for the other two remaining steps.

step_two/page

export default Page(){
  // YOU NEED TO IMPORT THE CONTEXT FIRST 
   const formContext = useNewUserFormContext()

  // STEP 1: Defining the form schemaüëáüèΩ
  const newUserFormSchema= z.object({
    email: z.string().min(3, 'at least 3 characteres'),
    password: z.string().min(3, 'at least 3 characteres'),
   
  })

  // STEP 2: Defining your form.
  const stepTwoForm = useForm<z.infer<typeof newUserFormSchema>>({
    resolver: zodResolver(newUserFormSchema),
    mode: 'onChange',
    defaultValues: {
      email: formContext.user.email,
      password: formContext.user.password,
    },
  })

  // STEP 3: Defining the submit function
  function onSubmit(values: z.infer<typeof newUserFormSchema>) {
    formContext.updateUserData(values)

    router.push('/login/step_three/')
  }

  const prevStep = () => {
    router.back()
  }
  
  return(<Form {...stepTwoForm}>
     <form
      onSubmit={stepTwoForm.handleSubmit(onSubmit)}
      className='bg-white p-6 rounded-lg shadow space-y-8'>
      <FormField
       name='name'
       control={stepTwoForm.control}
       render={({ field }) => (
        <FormItem>
         <FormLabel>Name</FormLabel>
         <FormMessage />
         <FormControl>
          <Input {...field} />
         </FormControl>
         <FormDescription className='text-gray-600'>
          Enter your name
         </FormDescription>
        </FormItem>
       )}
      />
      <FormField
       name='lastname'
       control={stepTwoForm.control}
       render={({ field }) => (
        <FormItem>
         <FormLabel>Lastname</FormLabel>
         <FormMessage />
         <FormControl>
          <Input {...field} />
         </FormControl>
        </FormItem>
       )}
      />
      <div className='py-10 space-x-8'>
       <Button type='button' onClick={prevStep}>Prev</Button>  
       <Button type='submit'>Next</Button>
      </div>
     </form>
    </Form>)

}
step_three/page

export default Page(){
  // YOU NEED TO IMPORT THE CONTEXT FIRST 
   const formContext = useNewUserFormContext()

  // STEP 1: Defining the form schemaüëáüèΩ
  const newUserFormSchema = z.object({
    age: z.string().min(1, 'at least 1 character'),
  })

  // STEP 2: Defining your form.
  const stepThreeForm = useForm<z.infer<typeof newUserFormSchema>>({
    resolver: zodResolver(newUserFormSchema),
    mode: 'onChange',
    defaultValues: {
      age: formContext.user.age,
    },
  })

  // STEP 3: Defining the submit function
  function onSubmit(values: z.infer<typeof newUserFormSchema>) {
    formContext.updateUserData(values)
      
    // add your code here to send the data to the server
  }

  const prevStep = () => {
    router.back()
  }
  
  return(<Form {...stepThreeForm}>
     <form
      onSubmit={stepThreeForm.handleSubmit(onSubmit)}
      className='bg-white p-6 rounded-lg shadow space-y-8'>
      <FormField
       name='age'
       control={stepThreeForm.control}
       render={({ field }) => (
        <FormItem>
         <FormLabel>Age</FormLabel>
         <FormMessage />
         <FormControl>
          <Input {...field} />
         </FormControl>
         <FormDescription className='text-gray-600'>
          Enter your age
         </FormDescription>
        </FormItem>
       )}
      />
      <div className='py-10 space-x-8'>
       <Button type='button' onClick={prevStep}>Prev</Button>  
       <Button type='submit'>Done</Button>
      </div>
     </form>
    </Form>)

}
That‚Äôs it! Working with forms can be tedious, but with the right tools, your work can be optimized, saving development time.

If you have feedback on this code, feel free to comment; I‚Äôd be happy to read it. Or if you have a solution you think is more optimal, I‚Äôd love to hear it.

You can find the code files, here: https://github.com/EdgarDev17/blog-code/tree/Build-Multi-step-form

Until next time, devs! Keep improving every day. üïµüèΩ

